<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Rails integrate with Mongodb]]></title>
      <url>/2017/10/06/Rails-integrate-with-Mongodb/</url>
      <content type="html"><![CDATA[<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>add gem to Gemfile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem &apos;mongoid&apos;, &apos;~&gt; 5.0.0&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle install</div></pre></td></tr></table></figure>
<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails g mongoid:config</div></pre></td></tr></table></figure>
<p>this command will create a config file at <code>./config/mongoid.yml</code></p>
<p>Please set up your mongodb config inside.</p>
<p>add a bootstrap when rails startup in <code>./config/application.rb&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mongoid.load!(&apos;./config/mongoid.yml&apos;)</div></pre></td></tr></table></figure>
<h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><p>assume we have a collection called <code>zips</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">mongo_client = Mongid::Clients.default</div><div class="line"></div><div class="line">mongo_client.database.name</div><div class="line"></div><div class="line">collection = mongo_client[:zips]</div><div class="line"></div><div class="line">collection.count</div></pre></td></tr></table></figure>
<h1 id="Model-DAO-class"><a href="#Model-DAO-class" class="headerlink" title="Model - DAO class"></a>Model - DAO class</h1><p><code>models/zip.rb</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zip</span></span></div><div class="line"></div><div class="line">	<span class="comment"># convenience method for access to client in console</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">mongo_client</span></span></div><div class="line">    	Mongoid::Clients.default</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment"># convenience method for access to zips collection</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">collection</span></span></div><div class="line">    	<span class="keyword">self</span>.mongo_client[<span class="string">'zips'</span>]</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment"># all maps to find</span></div><div class="line">    <span class="comment"># Implement a find that returns a collection of document as hashes</span></div><div class="line">    <span class="comment"># Use initialize(hash) to express individual documents as a class</span></div><div class="line">    <span class="comment"># * prototype - query example for value equality</span></div><div class="line">    <span class="comment"># * sort - hash expressing mult-term sort order</span></div><div class="line">    <span class="comment"># * offset - document to start results</span></div><div class="line">    <span class="comment"># * limit - number of documents to include</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">all</span><span class="params">(prototype=&#123;&#125;, sort=&#123;<span class="symbol">:population</span> =&gt; <span class="number">1</span>&#125;, offset=<span class="number">0</span>, limit=<span class="number">100</span>)</span></span></div><div class="line">    	<span class="comment"># map internal :population term to :pop document term</span></div><div class="line">        tmp = &#123;&#125;</div><div class="line">        sort.each <span class="keyword">do</span> <span class="params">|k, v|</span></div><div class="line">        	k = k.to_sym == <span class="symbol">:population</span> ? <span class="symbol">:pop</span> : k.to_sym</div><div class="line">            tmp[k] = v <span class="keyword">if</span> [<span class="symbol">:city</span>, <span class="symbol">:state</span>, <span class="symbol">:pop</span>].<span class="keyword">include</span>?(k)</div><div class="line">        <span class="keyword">end</span></div><div class="line">        sort = tmp</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.collection.find(prototype).sort(sort).skip(offset).limit(limit)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment"># find maps to find(hash)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span> <span class="title">id</span></span></div><div class="line">    	Rails.logger.debug &#123; <span class="string">"getting zip <span class="subst">#&#123;id&#125;</span>"</span> &#125;</div><div class="line">        </div><div class="line">        doc = <span class="keyword">self</span>.<span class="keyword">class</span>.collecition.find(<span class="symbol">:_id</span> =&gt; id).projection(&#123;<span class="symbol">:_id</span> =&gt; <span class="literal">true</span>, <span class="symbol">:city</span> =&gt; <span class="literal">true</span>, <span class="symbol">:state</span> =&gt; <span class="literal">true</span>, <span class="symbol">:pop</span> =&gt; <span class="literal">true</span>&#125;).first</div><div class="line">    </div><div class="line">    doc.<span class="literal">nil</span>? <span class="literal">nil</span> : Zip.new(doc)</div><div class="line">    </div><div class="line">    <span class="comment"># save maps to insert_one</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span></span></div><div class="line">    	Rails.logger.debug &#123; <span class="string">"saving <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span> &#125;</div><div class="line">    	<span class="keyword">self</span>.<span class="keyword">class</span>.collection.insert_one(<span class="symbol">_id:</span> @id, <span class="symbol">city:</span> @city, <span class="symbol">state:</span> @state, <span class="symbol">pop:</span> @population)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment"># update maps to update_one</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(updates)</span></span></div><div class="line">    	Rails.logger.debug &#123; <span class="string">"updating <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span> with <span class="subst">#&#123;updates&#125;</span>"</span> &#125;</div><div class="line">        </div><div class="line">        <span class="comment"># map internal :population term to :pop document term</span></div><div class="line">        update[<span class="symbol">:pop</span>] = updates[<span class="symbol">:population</span>] <span class="keyword">if</span> !updates[<span class="symbol">:population</span>].<span class="literal">nil</span>?</div><div class="line">        update.slice!(<span class="symbol">:city</span>, <span class="symbol">:state</span>, <span class="symbol">:pop</span>) <span class="keyword">if</span> !updates.<span class="literal">nil</span>?</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.<span class="keyword">class</span>.collection.find(<span class="symbol">_id:</span> @id).update_one(updates)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment"># destroy maps to delete_one</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></div><div class="line">    	Rails.logger.debug &#123; <span class="string">"destroying <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span> &#125;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">class</span>.collection.find(<span class="symbol">_id:</span> @id).delete_one</div><div class="line">    <span class="keyword">end</span></div><div class="line">     </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><ul>
<li><a href="https://docs.mongodb.com/mongoid/master/tutorials/mongoid-installation/" target="_blank" rel="external">Official Installation Doc</a></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[weredux - Redux on Rails？[0]]]></title>
      <url>/2017/09/17/weredux-Redux-on-Rails-0/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近我在学习 ruby on rails 框架，正巧也参加了今年的 ruby conf 2017。现在的我，有一种感觉特别深刻：ruby 这门语言在给程序员带来启发。那么，ruby 给我带来了什么启发呢？作为一名前端工程师，天天要写 react、redux ，肯定要从这两个万人项目入手，为自己，乃至社区做些贡献。所以，今天我的关键词是 <strong>Conventions</strong>。</p>
<h1 id="痛点-为什么？"><a href="#痛点-为什么？" class="headerlink" title="痛点 - 为什么？"></a>痛点 - 为什么？</h1><p>我想每个 react 工程师在用 redux 的时候，都会有个感觉，我写的代码好干净，结构真清晰，可惜就是重复的架构导致代码量特别多，小小的一个需求，可能动不动代码量就上千了。同时活在这个 typescript 的时代的我们还要把类型也声明清楚，这无疑对开发速度又是雪上加霜。明明我已经认同这些都是最佳实践了，那对于 redux 来说，我们也可以如同 rails 那样，将这些实践公约化，减少代码量。这就衍生出对应的两个思想：</p>
<ol>
<li>少的代码提升可维护性。</li>
<li>状态管理的过程能够维持同一种最佳实践。</li>
</ol>
<h1 id="方案-怎么做？"><a href="#方案-怎么做？" class="headerlink" title="方案 - 怎么做？"></a>方案 - 怎么做？</h1><h2 id="可能的方案"><a href="#可能的方案" class="headerlink" title="可能的方案"></a>可能的方案</h2><ul>
<li>基于文件系统的层面，类似shell之流生成脚手架文件</li>
<li>redux 中间件，可以对 action 和 state 同时施加黑魔法</li>
<li>npm包，类似 <code>redux-ui</code>，通过修饰器对特定的组件包装，统一管理自己的 reducer 和 store</li>
<li>webpack plugin，打包的时候施展黑魔法</li>
<li>babel plugin，转义的时候施展黑魔法</li>
</ul>
<h2 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weredux generate scaffold user</div></pre></td></tr></table></figure>
<p>能够生成 <code>fetchUsers</code>, <code>fetchUser</code>, <code>updateUser</code>, <code>deleteUser</code>, <code>createUser</code> 的相关状态管理</p>
<h3 id="施法范围"><a href="#施法范围" class="headerlink" title="施法范围"></a>施法范围</h3><p>未决定<br>这个地方是我最困惑的地方，Convention 到什么程度才是对的？</p>
<ul>
<li>reducer + action types + action creators 这些是必须的核心</li>
<li>immutable / redux-immutable 所有存于 store 的数据强制 immutable</li>
<li>normalizr 序列化 json 形成一种关系型数据库存储形态</li>
<li>集成 react-router 把路由一起黑了</li>
<li>同时生成测试文件，并暴露类似 migrations/seeds 的用法去处理 persisted state，倾向<code>jest</code></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我写下这一篇<code>[0]</code>章，就先挖一个坑给自己进行思考… 我坚信的是，所有的语言及框架的使用，如果在自己特有的最佳实践基础上，能够吸纳其他语言优秀的模式、思维、最佳实践，进行思维的碰撞，迸发的火花，肯定会更加绚丽。</p>
]]></content>
      
        <categories>
            
            <category> rocket </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rails </tag>
            
            <tag> redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hypernova]]></title>
      <url>/2017/09/09/Hypernova/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>airbnb 开源的服务端渲染（ssr）框架</p>
<p><a href="https://github.com/airbnb/hypernova" target="_blank" rel="external">hypernova</a></p>
<p><img src="/media/15049625081797.png" alt=""></p>
<ol>
<li>用户向服务器请求一个页面</li>
<li>服务器获取到当前页面的所有数据并准备进行渲染</li>
<li>此时，hypernova-client (ruby, node) 开始发送到 hypernova-server 请求渲染</li>
<li>hypernova-server 进行渲染</li>
<li>服务器将通过 hypernova-server 渲染的标记加入到渲染结果</li>
<li>在客户端，js 继续进行客户端渲染来实现渐进增强</li>
</ol>
<h1 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h1><ul>
<li>hypernova-server</li>
<li>hypernova-client</li>
<li>hypernova-wrapper</li>
</ul>
<h2 id="hypernova-server"><a href="#hypernova-server" class="headerlink" title="hypernova-server"></a>hypernova-server</h2><ol>
<li>真正执行ssr代码然后生成static html的地方，即一个独立的node环境，专门用来做ssr。</li>
<li>可以托管在serverless服务器上</li>
<li>方便，直接发送post请求即可得到ssr后的html</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST -d @payload.json http://localhost:3000/batch --header &quot;Content-Type: application/json&quot;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hypernova = <span class="built_in">require</span>(<span class="string">'hypernova/server'</span>);</div><div class="line"></div><div class="line">hypernova(&#123;</div><div class="line">  devMode: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  getComponent(name) &#123;</div><div class="line">    <span class="keyword">if</span> (name === <span class="string">'MyComponent.js'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./app/assets/javascripts/MyComponent.js'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  port: <span class="number">3030</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="三种方法获取component"><a href="#三种方法获取component" class="headerlink" title="三种方法获取component"></a>三种方法获取component</h3><ul>
<li>直接通过静态 件获取，会在 hypernova 内部 wrap 成为 commonJS 组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line">hypernova(&#123;</div><div class="line">  getComponent: createGetComponent(&#123;</div><div class="line">    MyComponent: path.resolve(path.join(<span class="string">'app'</span>, <span class="string">'assets'</span>, <span class="string">'javascripts'</span>, <span class="string">'MyComponent.js'</span>)),</div><div class="line">  &#125;),</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>直接通过 require 函数，直接传 组件名称</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hypernova(&#123;</div><div class="line">  getComponent: <span class="built_in">require</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>直接通过 promise fetch，获取远端组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hypernova(&#123;</div><div class="line">  getComponent(name) &#123;</div><div class="line">    <span class="keyword">return</span> promiseFetch(<span class="string">'https://MyComponent'</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="hypernova-client"><a href="#hypernova-client" class="headerlink" title="hypernova-client"></a>hypernova-client</h2><p>hypernova-client 是相对于 hypernova-server 的概念，但在真正的代码中其实是对应后端代码，在前端向后端请求的时候 hypernova-client 向 hypernova-server 请求html，然后后端再将得到的结果返回给前端</p>
<ul>
<li><a href="https://github.com/airbnb/hypernova-ruby" target="_blank" rel="external">hypernova-ruby</a></li>
<li><a href="https://github.com/airbnb/hypernova-node" target="_blank" rel="external">hypernova-node</a></li>
<li><a href="https://github.com/wayfair/hypernova-php" target="_blank" rel="external">hypernova-php</a></li>
<li>…</li>
</ul>
<p>i.e. rails 做为后端，使用 hypernova-ruby 做为 hypernova-client 发送请求</p>
<ol>
<li>view</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%= </div><div class="line">  render_react_component(</div><div class="line">    <span class="string">'MyComponent.js'</span>,</div><div class="line">    <span class="symbol">:name</span> =&gt; <span class="string">'Hypernova The Renderer'</span></div><div class="line">  )</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<ol>
<li>model</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">batch = Hypernova::Batch.new(service)</div><div class="line"></div><div class="line"><span class="comment"># each job in a hypernova render batch is identified by a token</span></div><div class="line"><span class="comment"># this allows retrieval of unordered jobs</span></div><div class="line">token = batch.render(</div><div class="line">  <span class="symbol">:name</span> =&gt; <span class="string">'some_bundle.bundle.js'</span>,</div><div class="line">  <span class="symbol">:date</span> =&gt; &#123; <span class="symbol">foo:</span> <span class="number">1</span>, <span class="symbol">bar:</span> <span class="number">2</span> &#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># now we can submit the batch job and await its results</span></div><div class="line"><span class="comment"># this blocks, and takes a significant time in round trips, so try to only</span></div><div class="line"><span class="comment"># use it once per request</span></div><div class="line">result = batch.submit!</div><div class="line"></div><div class="line"><span class="comment"># ok now we can access our rendered strings.</span></div><div class="line">foo1 = result[token].html_safe</div></pre></td></tr></table></figure>
<h2 id="hypernova-wrapper"><a href="#hypernova-wrapper" class="headerlink" title="hypernova-wrapper"></a>hypernova-wrapper</h2><p>这个地方是 hypernova 框架最有特色的地方，将前端的 react component 上包一层 hypernova-wrapper 就能完成isomerphic，即代码同构。</p>
<p>这种结构，能够最大程度的兼容老代码，不需要在已有的代码中进行大规模的修改，只需要在最顶层包装高阶组件。</p>
<ul>
<li><a href="https://github.com/airbnb/hypernova-react" target="_blank" rel="external">hypernova-react</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; renderReact &#125; <span class="keyword">from</span> <span class="string">'hypernova-react'</span>;</div><div class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./src/MyComponent.jsx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderReact(</div><div class="line">  <span class="string">'MyComponent.hypernova.js'</span>, <span class="comment">// this file's name (or really any unique name)</span></div><div class="line">  MyComponent,</div><div class="line">);</div></pre></td></tr></table></figure>
<p>使用 hypernova-react 高阶组件包装顶层，来配置不同运行环境下的行为。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">hypernova</span>(<span class="params">runner</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span></div><div class="line">    ? runner.server()</div><div class="line">    : runner.client();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hypernova, &#123; serialize, load &#125; <span class="keyword">from</span> <span class="string">'hypernova'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> renderReact = <span class="function">(<span class="params">name, component</span>) =&gt;</span> hypernova(&#123;</div><div class="line">  server() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> ReactDOMServer.renderToString(React.createElement(component, props))</div><div class="line">  &#125;,</div><div class="line">  client() &#123;</div><div class="line">    <span class="comment">// client side render</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>利用各种 hypernova-wrapper 来适用不同的业务场景</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> renderFunction = <span class="function">(<span class="params">name, configureStore</span>) =&gt;</span> hypernova(&#123;</div><div class="line">  server: <span class="function"><span class="params">()</span> =&gt;</span> props =&gt; serialize(name, configureStore.server(props)),</div><div class="line">  client: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> renderMorearty = <span class="function">(<span class="params">name, component, configureStore</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> hypernova(&#123;</div><div class="line">    server() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> wrappedComponent = configureStore.server(props);</div><div class="line">        <span class="keyword">return</span> ReactDOMServer.renderToString(React.createElement(wrapperComponent.bootstrap()));</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    client() &#123;</div><div class="line">      <span class="keyword">return</span> configureStore.client()</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="hypernova-的探索"><a href="#hypernova-的探索" class="headerlink" title="hypernova 的探索"></a>hypernova 的探索</h1><p>由于 hypernova 的本质是一个 node 服务端，以此来替代原来项目中传统的ssr解决方法。如果可以在这一层再引入中间件，抑或是当做中间件被其他 node 服务引入，那么 hypernova 会更加强大。<br>例如，react-router 自带了ssr，但是无法集成进 hypernova-server<br>又如，webpack 的 devServer 也是一个node进程，如果可以将 hypernova-server 集成进 devServer，那么本地调试的时候，就不用另起一个 hypernova 的 node 进程。</p>
]]></content>
      
        <categories>
            
            <category> ssr </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssr </tag>
            
            <tag> note </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Database Relationship]]></title>
      <url>/2017/09/06/Database-Relationship/</url>
      <content type="html"><![CDATA[<h1 id="Assumption"><a href="#Assumption" class="headerlink" title="Assumption"></a>Assumption</h1><ol>
<li>Person</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails g model person first_name last_name age:integer</div></pre></td></tr></table></figure>
<h1 id="One-to-One"><a href="#One-to-One" class="headerlink" title="One-to-One"></a>One-to-One</h1><p><img src="/media/15047418445837.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails g model personal_info height:float weight:float person:references</div></pre></td></tr></table></figure>
<ul>
<li>One person has exactly <code>one</code> personal_info entry</li>
<li>One personal_info entry <code>belongs</code> to exactly one person</li>
<li>The <strong><em>belongs to</em></strong> side is the one with a <code>foreign key</code></li>
</ul>
<p><strong>Convention</strong>: Default name for the foreign key is <code>#{master_table_singular}_id</code>, e.g. person_id</p>
<h2 id="Relationship-in-model"><a href="#Relationship-in-model" class="headerlink" title="Relationship in model"></a>Relationship in model</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalInfo</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:person</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># personal_info.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h3 id="Orphaned-associations-dependent"><a href="#Orphaned-associations-dependent" class="headerlink" title="Orphaned associations - dependent"></a>Orphaned associations - dependent</h3><ol>
<li><code>:delete</code> - remove associated object(s) by issuing a query</li>
<li><code>:destroy</code> - same as above, but remove the association by calling <code>destroy</code> on it</li>
<li><code>:nullify</code> - set the foreign key to NULL (leave the associated entity alone - just disassociate)</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Helper-methods"><a href="#Helper-methods" class="headerlink" title="Helper methods"></a>Helper methods</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">p = Person.find_by first_name: &quot;John&quot;</div><div class="line"></div><div class="line">p.personal_info</div><div class="line">=&gt; nil</div></pre></td></tr></table></figure>
<p>two way to new personal info for “John”</p>
<ul>
<li>create_personal_info</li>
<li>build_personal_info</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.create_personal_info height: 170.1, weight: 70.5</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p.build_personal_info height: 170.1, weight: 70.5</div><div class="line">p.save</div></pre></td></tr></table></figure>
<h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h2><ul>
<li><code>has_one</code></li>
<li><code>belongs_to</code></li>
<li><code>create_personal_info</code></li>
<li><code>build_personal_info</code></li>
</ul>
<h1 id="One-to-Many"><a href="#One-to-Many" class="headerlink" title="One-to-Many"></a>One-to-Many</h1><p><img src="/media/15047419004111.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails g model job title company position_id person:references</div></pre></td></tr></table></figure>
<ul>
<li>One person <code>has one or more</code> jobs</li>
<li>One job entry <code>belongs to</code> exactly one person</li>
<li>The <code>belongs to</code> side is the one with a foreign key</li>
</ul>
<p><strong>Convention</strong>: Default name for the foreign key is <code>#{master_table_singular}_id</code>, e.g. person_id</p>
<h2 id="Relationship-in-model-1"><a href="#Relationship-in-model-1" class="headerlink" title="Relationship in model"></a>Relationship in model</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># job.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:person</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Options-1"><a href="#Options-1" class="headerlink" title="Options"></a>Options</h2><h3 id="class-name"><a href="#class-name" class="headerlink" title="class_name"></a>class_name</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span></div><div class="line">  has_many <span class="symbol">:my_jobs</span>, <span class="symbol">class_name:</span> <span class="string">"Job"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>alias the name and point out the model name</p>
<h3 id="Orphaned-associations-dependent-1"><a href="#Orphaned-associations-dependent-1" class="headerlink" title="Orphaned associations - dependent"></a>Orphaned associations - dependent</h3><ol>
<li><code>:delete</code> - remove associated object(s) by issuing a query</li>
<li><code>:destroy</code> - same as above, but remove the association by calling <code>destroy</code> on it</li>
<li><code>:nullify</code> - set the foreign key to NULL (leave the associated entity alone - just disassociate)</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Helper-methods-1"><a href="#Helper-methods-1" class="headerlink" title="Helper methods"></a>Helper methods</h2><h3 id="lt-lt"><a href="#lt-lt" class="headerlink" title="&lt;&lt;"></a>&lt;&lt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">Job.create company: &quot;MS&quot;, title: &quot;Developer&quot;, position_id: &quot;#1234&quot;</div><div class="line">p1 = Person.first</div><div class="line">p1.jobs</div><div class="line">=&gt; nil</div><div class="line"></div><div class="line">p1.jobs &lt;&lt; Job.first</div><div class="line"></div><div class="line">Job.first.person</div><div class="line">=&gt; #&lt;Person ...</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.jobs.clear</div></pre></td></tr></table></figure>
<p>disassociates jobs from this person by setting foreign key to NULL</p>
<h3 id="create-and-where-scoped-to-person"><a href="#create-and-where-scoped-to-person" class="headerlink" title="create and where scoped to person!"></a>create and where scoped to person!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p1.jobs.create [</div><div class="line">  &#123; title: &quot;dev&quot;, company: &quot;MS&quot;, position_id: &quot;#123123&quot; &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.jobs.where(company: &quot;MS&quot;).count</div></pre></td></tr></table></figure>
<p>remember it is also helpful in migrations</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person.first.create! [</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Brief-1"><a href="#Brief-1" class="headerlink" title="Brief"></a>Brief</h2><ul>
<li><code>has_many</code></li>
<li><code>belongs_to</code></li>
<li><code>dependent</code></li>
<li><code>clear</code></li>
<li><code>create</code></li>
<li><code>where</code></li>
</ul>
<h1 id="Many-to-Many"><a href="#Many-to-Many" class="headerlink" title="Many-to-Many"></a>Many-to-Many</h1><p><img src="/media/15047419254688.jpg" alt=""></p>
<ul>
<li>One person can <code>have many</code> hobbies</li>
<li>One hobby can be <code>shared by many</code> people</li>
<li><code>habtm</code> (has_and_belongs_to_many)</li>
</ul>
<p>Need to create an extra (a.k.a join) table (without a model, i.e. just a migration)</p>
<p><strong>Convention</strong>: <strong><em>Plural</em></strong> model names separated by an underscore in <strong><em>alphabetical</em></strong> order</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rails g model hobby name</div><div class="line">rails g migration create_hobbies_people person:references hobby:references</div></pre></td></tr></table></figure>
<p>Hobbies_People &lt;- plural &amp;&amp; alphabetical order</p>
<h2 id="Migration-join-table"><a href="#Migration-join-table" class="headerlink" title="Migration - join table"></a>Migration - join table</h2><p>The Many-to-Many associated with <strong>2</strong> model and <strong>3</strong> migrations</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHobbiesPeople</span> &lt; ActiveRecord::Migration</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></div><div class="line">    create_table <span class="symbol">:hobbies_people</span>, <span class="symbol">id:</span> <span class="literal">false</span> <span class="keyword">do</span> <span class="params">|t|</span></div><div class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">index:</span> <span class="literal">true</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></div><div class="line">      t.references <span class="symbol">:hobby</span>, <span class="symbol">index:</span> <span class="literal">true</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Since we don’t need primary id in join tables, so set <code>id: false</code></p>
<h2 id="Relationship-in-model-2"><a href="#Relationship-in-model-2" class="headerlink" title="Relationship in model"></a>Relationship in model</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:hobbies</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># hobby.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:people</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Helper-method"><a href="#Helper-method" class="headerlink" title="Helper method"></a>Helper method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">josh = Person.find_by first_name: &quot;Josh&quot;</div><div class="line">=&gt; #&lt;Person ...</div><div class="line"></div><div class="line">lebron = Person.find_by first_name: &quot;Lebron&quot;</div><div class="line">=&gt; #&lt;Person ...</div><div class="line"></div><div class="line">programming = Hobby.create name: &quot;Programming&quot;</div><div class="line">=&gt; #&lt;Hobby ...</div><div class="line"></div><div class="line">josh.hobbies &lt;&lt; programming; lebron.hobbies &lt;&lt; programming</div><div class="line"></div><div class="line">programming.people</div><div class="line">=&gt; # ... Collection [ ... josh and lebron ... ]</div></pre></td></tr></table></figure>
<h2 id="Brief-2"><a href="#Brief-2" class="headerlink" title="Brief"></a>Brief</h2><ul>
<li><code>has_and_belongs_to</code></li>
<li>2 model and 3 migrations, join table only exists in the DB, but not in Ruby code</li>
</ul>
<h1 id="Rich-Many-to-Many"><a href="#Rich-Many-to-Many" class="headerlink" title="Rich Many-to-Many"></a>Rich Many-to-Many</h1><p><img src="/media/15047419465451.jpg" alt=""></p>
<ul>
<li>keep some data on the join table</li>
<li><code>grandchild</code> relationship on a model, user -&gt; articles -&gt; comments</li>
<li>in our case, all salary ranges for a particular person</li>
</ul>
<h2 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h2><p>you first <code>create</code> and <code>regular</code> parent-child relationship and then <code>use the child model as a join</code> between the parent and grandchild</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rails g model salary_range min_salary:float max_salary:float job:references</div><div class="line"></div><div class="line">rake db:migrate</div></pre></td></tr></table></figure>
<h2 id="Relationship-in-model-3"><a href="#Relationship-in-model-3" class="headerlink" title="Relationship in model"></a>Relationship in model</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># job.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:person</span></div><div class="line">  has_one <span class="symbol">:salary_range</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># salary_range.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryRange</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:job</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>person</code> is grandparent to <code>salary_range</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># person.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:hobbies</span></div><div class="line">  has_many <span class="symbol">:approx_salary</span>, <span class="symbol">through:</span> <span class="symbol">:jobs</span>, <span class="symbol">source:</span> <span class="symbol">:salary_range</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Helper-methods-2"><a href="#Helper-methods-2" class="headerlink" title="Helper methods"></a>Helper methods</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">lebron = Person.find_by(first_name: &quot;LeBron&quot;)</div><div class="line">=&gt; #&lt;Person ...</div><div class="line"></div><div class="line">lebron.jobs.count</div><div class="line">=&gt; 2</div><div class="line"></div><div class="line">lebron.jobs.pluck(:id)</div><div class="line">=&gt; [12, 13]</div><div class="line"></div><div class="line">Job.find(12).create_salary_range(min_salary: 10000.00, max_salary: 20000.00)</div><div class="line">=&gt; #&lt;SalaryRange id: 1 ...</div><div class="line"></div><div class="line">Job.find(13).create_salary_range(min_salary: 15000.00, max_salary: 35000.00)</div><div class="line">=&gt; #&lt;SalaryRange id: 2 ...</div><div class="line"></div><div class="line">lebron.approx_salaries</div><div class="line">=&gt; ... Collection ... [ #&lt;SalaryRange id: 1 ... , #&lt;SalaryRange id: 2 ... ]</div></pre></td></tr></table></figure>
<h3 id="Calculations"><a href="#Calculations" class="headerlink" title="Calculations"></a>Calculations</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_info</span></div><div class="line">  has_many <span class="symbol">:jobs</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:hobbies</span></div><div class="line">  has_many <span class="symbol">:approx_salaries</span>, <span class="symbol">through:</span> <span class="symbol">:jobs</span>, <span class="symbol">source:</span> <span class="symbol">:salary_range</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max_salary</span></span></div><div class="line">    approx_salaries.maximum(<span class="symbol">:max_salary</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rails c</div><div class="line"></div><div class="line">lebron = Person.find_by first_name: &quot;Lebron&quot;</div><div class="line"></div><div class="line">lebron.max_salary</div><div class="line">=&gt; 350000.00</div></pre></td></tr></table></figure>
<p>More infos on <a href="http://api.rubyonrails.org/classes/ActiveRecord/Calculations.html" target="_blank" rel="external">http://api.rubyonrails.org/classes/ActiveRecord/Calculations.html</a></p>
<h1 id="Brief-3"><a href="#Brief-3" class="headerlink" title="Brief"></a>Brief</h1><ul>
<li><code>though</code></li>
<li><code>source</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Rails </category>
            
        </categories>
        
        
        <tags>
            
            <tag> note </tag>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello world]]></title>
      <url>/2017/09/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Awesome! This is my first article in Hexo !</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Responsive Image]]></title>
      <url>/2017/03/23/Responsive-Image/</url>
      <content type="html"><![CDATA[<h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>high-res devices can get the optimum image for a given resolution, while low-resolution devices can avoid wasting time and bandwidth downloading overly-large files.</p>
<p>img</p>
<ul>
<li>fixed width, single density web page</li>
<li>small difference in file size</li>
<li>SVG, vector-based image</li>
</ul>
<p><img src="/media/15047511251362.jpg" alt=""></p>
<h1 id="Use-Case-Resolution-Switch"><a href="#Use-Case-Resolution-Switch" class="headerlink" title="Use Case: Resolution Switch"></a>Use Case: Resolution Switch</h1><p>Resolution switching is the most common use case. It refers to any scenario where you all you want to do is provide different sizes of an image and you’re not making any modifications to the content or aspect ratio of the image.</p>
<p><img src="/media/15047511666151.jpg" alt=""></p>
<h2 id="Attribute-srcset"><a href="#Attribute-srcset" class="headerlink" title="Attribute: srcset"></a>Attribute: srcset</h2><h3 id="Display-Density-Descriptors"><a href="#Display-Density-Descriptors" class="headerlink" title="Display Density Descriptors"></a>Display Density Descriptors</h3><p><img src="/media/15047511772943.jpg" alt=""></p>
<h3 id="Width-Descriptors"><a href="#Width-Descriptors" class="headerlink" title="Width Descriptors"></a>Width Descriptors</h3><p><img src="/media/15047511881117.jpg" alt=""></p>
<h2 id="Attribute-sizes"><a href="#Attribute-sizes" class="headerlink" title="Attribute: sizes"></a>Attribute: sizes</h2><p>image begin downloading before CSS and JS files downloaded completely, so browser only get viewport at that time</p>
<p><img src="/media/15047511987323.jpg" alt=""></p>
<h3 id="Media-Condition"><a href="#Media-Condition" class="headerlink" title="Media Condition"></a>Media Condition</h3><p><code>@media screen</code> can not used</p>
<p>mostly<br><code>(max-width: 480px)</code> and <code>(min-width: 480px)</code></p>
<h3 id="Lengths"><a href="#Lengths" class="headerlink" title="Lengths"></a>Lengths</h3><p>vw = viewport width</p>
<p>100vw = 100% viewport width</p>
<p>support absolute and relative length, even CSS calc()</p>
<h3 id="Make-browser-be-smart"><a href="#Make-browser-be-smart" class="headerlink" title="Make browser be smart"></a>Make browser be smart</h3><p>until now, what we done, give more attribute to <code>&lt;img&gt;</code>, is a suggestion to browser, and then make it be smarter to choose better image size</p>
<p><img src="/media/15047512087785.jpg" alt=""></p>
<h1 id="Use-Case-Art-Direction"><a href="#Use-Case-Art-Direction" class="headerlink" title="Use Case: Art Direction"></a>Use Case: Art Direction</h1><p>image have gravity, when saw in small screen device, not whole image resize, just crop the meaningful part from image.</p>
<p><a href="https://cloudfour.com/examples/img-currentsrc/" target="_blank" rel="external">Image Current Src Demo</a></p>
<p><img src="/media/15047512167536.jpg" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"homepage-person@desktop.png, homepage-person@desktop-2x.png 2x"</span>       </span></div><div class="line"><span class="tag">          <span class="attr">media</span>=<span class="string">"(min-width: 990px)"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"homepage-person@tablet.png, homepage-person@tablet-2x.png 2x"</span> </span></div><div class="line"><span class="tag">          <span class="attr">media</span>=<span class="string">"(min-width: 750px)"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"homepage-person@mobile.png, homepage-person@mobile-2x.png 2x"</span> </span></div><div class="line"><span class="tag">       <span class="attr">alt</span>=<span class="string">"Shopify Merchant, Corrine Anestopoulos"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
<p>here, <code>media</code> attribute is a directive to browser rather than a suggestion.</p>
<h2 id="Attribute-type"><a href="#Attribute-type" class="headerlink" title="Attribute: type"></a>Attribute: type</h2><p>The browser will pick the first source where the declared image type is one that it supports. If it doesn’t recognize any of the source types, it will use the <img> element’s src or srcset declarations.</p>
<p><img src="/media/15047512263209.jpg" alt=""></p>
<h1 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h1><ul>
<li>Most images on the web fit the resolution switching use case.</li>
<li>When you’ve got a resolution switching use case, you want to empower the browser to make the best choice possible. This is what srcset is designed to do.</li>
<li>When you use the <picture> element with media attributes, you’re dictating to the browser what images it should use.</picture></li>
<li>Therefore, you can and should use <picture> when you want both resolution switching and to support multiple image formats. Just leave off the media attribute so that the browser can do its thing.</picture></li>
</ul>
<h1 id="Other-stuff"><a href="#Other-stuff" class="headerlink" title="Other stuff"></a>Other stuff</h1><h2 id="img-fallback-of-SVG"><a href="#img-fallback-of-SVG" class="headerlink" title="img fallback of SVG"></a>img fallback of SVG</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;logo.svg&quot; onerror=&quot;this.src=logo-fallback.png;this.onerror=null;&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="picture-of-SVG"><a href="#picture-of-SVG" class="headerlink" title="picture of SVG"></a>picture of SVG</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;picture&gt;</div><div class="line">    &lt;source type=&quot;image/svg+xml&quot; srcset=&quot;path/to/logo.svg&quot;&gt;</div><div class="line">    &lt;img src=&quot;path/to/logo-1x.png&quot; srcset=&quot;path/to/logo-2x.png 2x, path/to/logo-3x.png 3x&quot; alt=&quot;Logo description&quot;&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure>
<h1 id="Responsive-image-in-CSS"><a href="#Responsive-image-in-CSS" class="headerlink" title="Responsive image in CSS"></a>Responsive image in CSS</h1><h1 id="image-set"><a href="#image-set" class="headerlink" title="image-set"></a>image-set</h1><p><img src="/media/15047512362925.jpg" alt=""></p>
<h1 id="Media-query"><a href="#Media-query" class="headerlink" title="Media query"></a>Media query</h1><p><img src="/media/15047512441547.jpg" alt=""></p>
<h1 id="Break-points"><a href="#Break-points" class="headerlink" title="Break points"></a>Break points</h1><p><img src="/media/15047512522102.jpg" alt=""></p>
<p>Instead of spacing out breakpoints evenly, we should have more breakpoints as the image gets larger.</p>
<h1 id="Processing-Responsive-Image"><a href="#Processing-Responsive-Image" class="headerlink" title="Processing Responsive Image"></a>Processing Responsive Image</h1><ul>
<li>Where possible, use resolution independent SVG images.</li>
<li>When creating or modifying the design of templates, the template author provides the sizes attribute for the various images in the template.</li>
<li>The srcset attribute with width descriptors is inserted by the server which does all of the heavy lifting of figuring out what image breakpoints to choose for each image.</li>
<li>Content authors never worry about any of this. Their only responsibility is to upload the highest quality source available and let the image resizing service take care of the rest.</li>
</ul>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><ul>
<li><strong><a href="https://cloudfour.com/thinks/responsive-images-101-definitions/" target="_blank" rel="external">Responsive Images 101</a></strong></li>
<li><strong><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="external">lazysizes</a></strong></li>
<li><strong><a href="https://dev.opera.com/articles/native-responsive-images/" target="_blank" rel="external">native responsive image</a></strong></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering" target="_blank" rel="external">image-rendering CSS property</a></li>
<li><a href="https://www.paintcodeapp.com/news/iphone-6-screens-demystified" target="_blank" rel="external">Iphone 6P downsampling</a></li>
<li><a href="https://sarasoueidan.com/blog/svg-picture/" target="_blank" rel="external">Better SVG Fallback and Art Direction With The <picture> Element</picture></a></li>
<li><a href="http://www.responsivebreakpoints.com/" target="_blank" rel="external">BreakingPoint Generator</a></li>
<li><a href="http://caniuse.com/#feat=devicepixelratio" target="_blank" rel="external">Window.devicePixelRatio</a></li>
<li><a href="http://cloudinary.com/documentation/image_transformation_reference" target="_blank" rel="external">Cloudinary Image Transformation reference</a></li>
<li><a href="http://cloudinary.com/documentation/responsive_images" target="_blank" rel="external">Cloudinary BreakingPoint Generator</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> image </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Note </tag>
            
            <tag> image </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[请开启MongoDB鉴权模式]]></title>
      <url>/2017/01/18/%E8%AF%B7%E5%BC%80%E5%90%AFMongoDB%E9%89%B4%E6%9D%83%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Mongodb-enable-authentication"><a href="#Mongodb-enable-authentication" class="headerlink" title="Mongodb enable authentication"></a>Mongodb enable authentication</h1><p>MongoDB 默认直接连接，无须身份验证，如果当前机器可以公网访问，且不注意Mongodb 端口（默认 27017）的开放状态，那么Mongodb就会产生安全风险，被利用此配置漏洞，入侵数据库。</p>
<h1 id="容易遭受入侵的环境"><a href="#容易遭受入侵的环境" class="headerlink" title="容易遭受入侵的环境"></a>容易遭受入侵的环境</h1><ul>
<li>使用默认 mongod 命令启动 Mongodb</li>
<li>机器可以被公网访问</li>
<li>在公网上开放了 Mongodb 端口</li>
</ul>
<h1 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h1><ul>
<li>数据库隐私泄露</li>
<li>数据库被清空</li>
<li>数据库运行缓慢</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="1-禁止公网访问-Mongodb-端口"><a href="#1-禁止公网访问-Mongodb-端口" class="headerlink" title="1. 禁止公网访问 Mongodb 端口"></a>1. 禁止公网访问 Mongodb 端口</h2><h3 id="1-1-网络配置"><a href="#1-1-网络配置" class="headerlink" title="1.1 网络配置"></a>1.1 网络配置</h3><p>由于网络配置因人而异，需要根据自己实际环境进行配置，不作冗述。大致可以从以下方面禁止。</p>
<ul>
<li>在路由器中关闭端口转发</li>
<li>防火墙 iptables 禁止访问</li>
</ul>
<h3 id="1-2-验证端口能否访问方式"><a href="#1-2-验证端口能否访问方式" class="headerlink" title="1.2 验证端口能否访问方式"></a>1.2 验证端口能否访问方式</h3><p>在外网机器命令行中运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet your.machine.open.ip 27017</div></pre></td></tr></table></figure></p>
<h2 id="2-启用验证"><a href="#2-启用验证" class="headerlink" title="2. 启用验证"></a>2. 启用验证</h2><h3 id="2-1-创建用户管理员账户"><a href="#2-1-创建用户管理员账户" class="headerlink" title="2.1 创建用户管理员账户"></a>2.1 创建用户管理员账户</h3><p>当前数据库版本：Mongodb 3.4</p>
<p>使用 mongod 启动数据库<br>新建终端</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --port 27017 --dbpath /data/db1</div></pre></td></tr></table></figure>
<p><strong>参数默认可以不加，若有自定义参数，才要加上，下同。</strong></p>
<p>另起一个终端，运行下列命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mongo --port 27017</div><div class="line"></div><div class="line">use admin</div><div class="line"></div><div class="line">db.createUser(</div><div class="line">  &#123;</div><div class="line">    user: <span class="string">"adminUser"</span>,</div><div class="line">    <span class="built_in">pwd</span>: <span class="string">"adminPass"</span>,</div><div class="line">    roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>管理员创建成功，现在拥有了用户管理员<br>用户名：adminUser<br>密码：adminPass<br>然后，断开 mongodb 连接， 关闭数据库<br>两个终端下 <c -="" c=""></c></p>
<h3 id="2-2-Mongodb-用户验证登陆"><a href="#2-2-Mongodb-用户验证登陆" class="headerlink" title="2.2 Mongodb 用户验证登陆"></a>2.2 Mongodb 用户验证登陆</h3><p>启动带访问控制的 Mongodb<br>新建终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --auth --port 27017 --dbpath /data/db1</div></pre></td></tr></table></figure></p>
<p>现在有两种方式进行用户身份的验证<br>第一种 （类似 MySql）<br>客户端连接时，指定用户名，密码，db名称<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo --port 27017 -u <span class="string">"adminUser"</span> -p <span class="string">"adminPass"</span> --authenticationDatabase <span class="string">"admin"</span></div></pre></td></tr></table></figure></p>
<p>第二种<br>客户端连接后，再进行验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mongo --port 27017</div><div class="line"></div><div class="line">use admin</div><div class="line">db.auth(<span class="string">"adminUser"</span>, <span class="string">"adminPass"</span>)</div><div class="line"></div><div class="line">// 输出 1 表示验证成功</div></pre></td></tr></table></figure></p>
<h3 id="2-3-创建普通用户"><a href="#2-3-创建普通用户" class="headerlink" title="2.3 创建普通用户"></a>2.3 创建普通用户</h3><p>过程类似创建管理员账户，只是 role 有所不同</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">use foo</div><div class="line"></div><div class="line">db.createUser(</div><div class="line">  &#123;</div><div class="line">    user: <span class="string">"simpleUser"</span>,</div><div class="line">    <span class="built_in">pwd</span>: <span class="string">"simplePass"</span>,</div><div class="line">    roles: [ &#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"foo"</span> &#125;,</div><div class="line">             &#123; role: <span class="string">"read"</span>, db: <span class="string">"bar"</span> &#125; ]</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>现在我们有了一个普通用户<br>用户名：simpleUser<br>密码：simplePass<br>权限：读写数据库 foo， 只读数据库 bar。</p>
<p><strong>注意</strong><br><strong>NOTE</strong><br><strong>WARN</strong><br><code>use foo</code>表示用户在 foo 库中创建，就一定要 foo 库验证身份，即用户的信息跟随随数据库。比如上述 simpleUser 虽然有 bar 库的读取权限，但是一定要先在 foo 库进行身份验证，直接访问会提示验证失败。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use foo</div><div class="line">db.auth(<span class="string">"simpleUser"</span>, <span class="string">"simplePass"</span>)</div><div class="line"></div><div class="line">use bar</div><div class="line">show collections</div></pre></td></tr></table></figure></p>
<p>还有一点需要注意，如果 admin 库没有任何用户的话，即使在其他数据库中创建了用户，启用身份验证，默认的连接方式依然会有超级权限</p>
<h3 id="2-4-内建角色"><a href="#2-4-内建角色" class="headerlink" title="2.4 内建角色"></a>2.4 内建角色</h3><ul>
<li>Read：允许用户读取指定数据库</li>
<li>readWrite：允许用户读写指定数据库</li>
<li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li>
<li>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li>
<li>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</li>
<li>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</li>
<li>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</li>
<li>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</li>
<li>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</li>
<li>root：只在admin数据库中可用。超级账号，超级权限</li>
</ul>
<h3 id="2-5-URI-形式的访问"><a href="#2-5-URI-形式的访问" class="headerlink" title="2.5 URI 形式的访问"></a>2.5 URI 形式的访问</h3><p>生产中常用 URI 形式对数据库进行连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb://your.db.ip.address:27017/foo</div></pre></td></tr></table></figure></p>
<p>添加用户名密码验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb://simpleUser:simplePass@your.db.ip.address:27017/foo</div></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/" target="_blank" rel="external">Enable Authentication</a></li>
<li><a href="https://docs.mongodb.com/manual/core/security-built-in-roles/" target="_blank" rel="external">Build-in Roles</a></li>
<li><a href="http://www.cnblogs.com/zhoujinyi/p/4610050.html" target="_blank" rel="external">Mongodb 3.0 用户创建</a></li>
<li><a href="http://bubkoo.com/2014/02/07/mongodb-authentication/" target="_blank" rel="external">Mongodb Authentication</a></li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>在使用数据库的过程中，一定要注意安全风险，由于 Mongodb 的默认配置，使得数据库有入侵风险，应该予以防范。</p>
]]></content>
      
        <categories>
            
            <category> mongodb </category>
            
        </categories>
        
        
        <tags>
            
            <tag> db </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grok Vi]]></title>
      <url>/2017/01/10/Grok-Vi/</url>
      <content type="html"><![CDATA[<h1 id="透悉Vi-Grok-Vi"><a href="#透悉Vi-Grok-Vi" class="headerlink" title="透悉Vi Grok Vi"></a>透悉Vi Grok Vi</h1><h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>​    现在的代码编辑器层出不穷，好比Sublime，Atom，VScode，WebStorm等等，大多都支持插件扩展。各有各的特色。但是我在这些现代编辑器上装上Vim插件后，体验就良莠不齐了。最终在今天，我在服务器上使用vim对代码进行微调时，让我产生了回归终端vim的心。</p>
<p>​    vim历经了这么多年的发现，插件层出不穷。各家各人都会自己习惯的配置。在我装完那些vim眼花缭乱的自定义配置后，我根本不知道有哪些功能是我需要的，哪些原生的功能被替代了。</p>
<p>​    有趣的是，当我下决心自定义vim配置时，我搜索了大量文章，却意外获得了许多vi编辑器的经验，下面一起来感受一下vi/vim时代的强大。</p>
<h2 id="vi-的禅"><a href="#vi-的禅" class="headerlink" title="vi 的禅"></a>vi 的禅</h2><p>​    多数人在初次使用vim的时候，都会不习惯于<code>dd/yy</code>+ <code>p</code> 之于vim，毕竟我们习惯了<code>ctrl+c</code> 和<code>ctrl+v</code>。 </p>
<p>​    其实vi 的哲理在于当你在进行编辑操作的时候，就好比陈述，好似人对电脑口述命令。</p>
<h3 id="动词-Verb"><a href="#动词-Verb" class="headerlink" title="动词 Verb"></a>动词 Verb</h3><p>​        <code>y</code> 就是一个动词，告诉vi我需要coPy。<code>yy</code> 则是<code>yz</code> 的别名，为了方便操作，表示我要复制这一行。类似的，<code>d</code> 也是一个动词，告诉vi我要Delete，<code>dd</code> 则是说我要删除这一行。当然这时候，这一行的数据其实存放到匿名寄存器中，可以看到这个副作用，正好完成了Cut的动作。</p>
<h3 id="主语-Subject"><a href="#主语-Subject" class="headerlink" title="主语 Subject"></a>主语 Subject</h3><p>​    提到了动词，动词产生一个动作，必定会有主语（实施者）。</p>
<p>​    举例来说，<code>yW</code> 这句话就表示从当前的位置直到W(下一个整词)进行复制操作。</p>
<h4 id="寄存器-Register"><a href="#寄存器-Register" class="headerlink" title="寄存器 Register"></a>寄存器 Register</h4><p>​    在vi中的大多数的操作都会被存放在匿名寄存器中。同时，vi也提供了26个用字母命名的寄存器。注意这些寄存器的名字均为英文字母的小写。</p>
<p>​    使用<code>m</code> 指令来标记寄存器，<code>ma</code> 表示当前位置将被标记并存放在a寄存器中，<code>y&#39;a</code> 则表示从当前位置到a寄存器的标记位置进行复制操作。</p>
<p>​    单引号<code>&#39;</code> +字母，表示到寄存器标记位置所在的行</p>
<p>​    反引号`+字母，表示到寄存器的精确标记位置</p>
<p>​    现在，我们有了主语，有了动词，我们不需要进行宏录制，也能进行许多以前不能进行的操作了。</p>
<h4 id="段落-Paragraph"><a href="#段落-Paragraph" class="headerlink" title="段落 Paragraph"></a>段落 Paragraph</h4><p>​    现在，我们来了解段落的标记位置。<code>{</code> 和<code>}</code> ，使用后会分别移动到段落前/后的位置。配置前述的动词来构成新的对话。</p>
<p>​    <code>{</code>  <code>d}</code> 只是用的3个按键就对当前的段落进行了剪切操作。如果你正好在段首，段尾，<code>d{</code> <code>d}</code> 就更方便了。</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>​    你是否想过，正则表达式也可以作句子的主语。</p>
<p>​    <code>d/foo</code> <strong>从 当前行 到 下一个含有字符串foo的行</strong> 进行 <strong>剪切</strong></p>
<p>​    <code>y?bar</code> <strong>从 当前位置 到 下一个含有字符串bar的上一行</strong> 进行 <strong>复制</strong></p>
<h3 id="宾语-Object"><a href="#宾语-Object" class="headerlink" title="宾语 Object"></a>宾语 Object</h3><p>​    有了主语，动词，就一定会有宾语 Object。</p>
<h4 id="命名寄存器"><a href="#命名寄存器" class="headerlink" title="命名寄存器"></a>命名寄存器</h4><p>​    26个字母命名的寄存器中的内容，通过加前缀<code>“</code> 来调用，就可以充当宾语。</p>
<p>​    <code>&quot;add</code> 当前行 剪切到 a寄存器</p>
<p>​    <code>&quot;by/foo</code> 从 当前位置 到 下一个含有字符串foo的行 复制到 b寄存器</p>
<p>​    <code>&quot;ap</code> 在下一行 打印 a寄存器的内容</p>
<p>​    <code>&quot;bP</code> 在上一行 打印 b寄存器的内容</p>
<h3 id="形容词与副词-Adjective-and-Adverbs"><a href="#形容词与副词-Adjective-and-Adverbs" class="headerlink" title="形容词与副词 Adjective and Adverbs"></a>形容词与副词 Adjective and Adverbs</h3><p>​    <code>3J</code> 对下面3行的内容 进行连接</p>
<p>​    <code>d5}</code>     从当前行 到 下面5个段落段尾 进行删除</p>
<hr>
<h2 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h2><h2 id="行编辑器"><a href="#行编辑器" class="headerlink" title=": 行编辑器"></a><code>:</code> 行编辑器</h2><p><code>:% s/foo/bar/g</code>    在所有行，出现的所有foo 替换成 bar</p>
<p>vi出生的年代，大多数终端设备还是teletype(TTY)设备，经常要同过一个简陋的交互界面（通常连接速度在110波特，粗略地说就是 11字符/秒，比一个快速的打印机还慢）对打印出的文本副本进行操作。</p>
<p>所以，<code>:</code> 是行编辑器的代名词，通常涉及到的都是多行操作，这样就会有一个操作范围。</p>
<p>例如，<code>:127,215 s/foo/bar</code> 界定了在127到215行，对foo替换成bar的操作。</p>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>行操作时，<code>.</code> 表示当前行，<code>$</code> 表示最后一行，<code>+</code> 和<code>-</code> 表示相对当前行向后/向前偏移行</p>
<p>​    <code>:.,$j</code> 当前行到最后一行，进行连接</p>
<p>​    <code>:%</code> 和<code>:1,$</code> 都表示所有行</p>
<h3 id="g-和-v"><a href="#g-和-v" class="headerlink" title="g 和 v"></a>g 和 v</h3><p>g - globally</p>
<p>v - conVerse paper</p>
<p><code>:… g</code> 代表了后续操作是全局匹配随后的正则（在行界定的范围内）</p>
<p><code>:… v</code> 表示了后续操作时全局 <strong>不</strong> 匹配随后的正则 （在行界定的范围内）</p>
<p>举例来说</p>
<p><code>:.,+21g/foo/d</code> 在当前行到随后的21行内，出现的所有含有 foo 的行都删除</p>
<p><code>:.,$v/bar/d</code> 在当前行到最后一行内，出现的所有 <strong>不</strong> 含有 bar 的行都删除</p>
<p>记住，<code>:… v/re/…</code> 是一个很常用的指令</p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep指令正是受到了 g 的启发，效果和 <code>:g/re/p</code>一样</p>
<p>grep -v 就跟 <code>:v/re/p</code> 结果相同</p>
<h2 id="m指令"><a href="#m指令" class="headerlink" title="m指令"></a>m指令</h2><p>​    m在vi中可以用来移动多行，同时配合<code>j</code> 移动后再连接内容。</p>
<p>下面举例来说：</p>
<p><code>:% g/foo/m$</code> 将全文中所有含有 foo 的行都移动到了文档末尾</p>
<p>就好比运行了<code>1G!GGmap!Ggrep foo&lt;ENTER&gt;1G:1, &#39;a g/foo&#39;/d</code> </p>
<p>复制文档内容到结尾，通过grep指令过滤结尾，然后从头删除所有内容</p>
<h2 id="j指令-连接空行"><a href="#j指令-连接空行" class="headerlink" title="j指令 连接空行"></a>j指令 连接空行</h2><p>​    通常，我们连接行之前，都需要通过正则来得到要连接的内容，之后使用<code>j</code> 连接到上一行</p>
<p>​    <code>:%g/^  /-1j</code> 对所有的空行（这边排除了块注释可能用到的 * 行）</p>
<h2 id="s指令-替换"><a href="#s指令-替换" class="headerlink" title="s指令 替换"></a>s指令 替换</h2><p>​    我们知道<code>:% s/foo/bar/g</code> 可以对所有行中出现的所有foo替换成bar。他也可以和g/v指令配合，甚至和寄存器配合，划定范围。</p>
<h3 id="配合g-v"><a href="#配合g-v" class="headerlink" title="配合g/v"></a>配合g/v</h3><p><code>:% g/foo/s/bar/zzz/g</code> 所有含有foo的行中，对所有bar替换成zzz</p>
<p>这种操作方便非常便捷，完整。</p>
<p>​    同样地，如果使用类似<code>:%s/\(.* foo.*\ )bar\ ( . * \ )/\1zzz\2/g</code>不仅冗长，而且只能替换foo出现后的bar，并不能得到我们想要的结果  </p>
<h3 id="配合寄存器"><a href="#配合寄存器" class="headerlink" title="配合寄存器"></a>配合寄存器</h3><p><code>:&#39;a,&#39;b g/foo/j</code> 在a，b寄存器中间的行，都会连接到其下一行</p>
<h2 id="r指令"><a href="#r指令" class="headerlink" title=":r指令"></a>:r指令</h2><p>:r 他的功能是将其他文件的内容读取到当前位置。</p>
<p><code>:r foo</code> 将文件 foo 中的内容插入到当前行</p>
<h2 id="bang指令"><a href="#bang指令" class="headerlink" title=":! bang指令"></a>:! bang指令</h2><p>！表示运行，他会运行后续的操作，然后将结果输出到当前内容。</p>
<p><code>1G!Gsort</code> 对全文进行排序整理</p>
<p>等同于<code>:1,$!sort</code> </p>
<h3 id="配合-fmt-或者-fold-工具"><a href="#配合-fmt-或者-fold-工具" class="headerlink" title="配合 fmt 或者 fold 工具"></a>配合 fmt 或者 fold 工具</h3><p><code>{!}fmt</code> 对当前段落重新格式化 reformat</p>
<h3 id="配合r指令-r"><a href="#配合r指令-r" class="headerlink" title="配合r指令 :r!"></a>配合r指令 :r!</h3><p><code>:r!</code> 和<code>!</code> 表示任何外部的工具或者过滤器都能被当成编辑器的插件来使用。例如，从数据库中拉取数据，或者使用 wget 或 lynx 命令从网站提取数据，又或者使用 ssh 指令从远程服务器获取数据</p>
<h2 id="so-source"><a href="#so-source" class="headerlink" title=":so (:source)"></a>:so (:source)</h2><p>​    <code>:so</code> 是 <code>:source</code> 的缩写形式，他用来读取包含一系列操作的外部文件。</p>
<p>用法是，<code>:source ~/.vimrc</code> 就可以从 .vimrc 中读取自定义的配置。</p>
<p>如果，现在我有一个宏指令文件，作用是统计单词数，在文件头部插入一个注释，显示文件的单词数，就可以使用<code>so</code> 来应用到其他文件。</p>
<p><code>vim +&#39;so mymacro.ex&#39; ./mytarget</code></p>
<p><code>+</code>在vim中 通常用来让vim从给定的行数开始编辑，这里借用来使用外部宏。</p>
<p><code>vi +&#39;/foo/d|wq!&#39; ~/.ssh/known_hosts</code> 从SSH的know_hosts中删除含有字符串foo的行</p>
<p>同过外加宏指令，可以配置Perl， AWK， sed来实现不同的操作。</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="@指令"></a>@指令</h2><p><code>@</code> 是一个较少人使用的指令，他的功能是运行给定的命名寄存器中的指令。</p>
<p>比如说，我要用<code>:r!locate …</code> 来查找系统中的文件，然后获取文件名。</p>
<p>现在可以这么做：</p>
<ul>
<li><p><code>0i:r</code> 移动到行首，插入<code>:r</code> </p>
</li>
<li><p><code>&quot;cdd</code> 删除当前行，并存放到c寄存器</p>
</li>
<li><p><code>@c</code> 运行c寄存器中的指令</p>
<p>​</p>
</li>
</ul>
<h2 id="q指令"><a href="#q指令" class="headerlink" title="q指令"></a>q指令</h2><p>通过q来录制宏命令：</p>
<ul>
<li>第一次按下<code>q</code> 表示将要录制宏</li>
<li>接着按下任意字母，例如<code>c</code> ，表示宏指令存放在某个字母寄存器中(以c寄存器为例)</li>
<li>底部出现recording，表示正在录制，进行所需的宏操作</li>
<li>完成后，再次按<code>q</code> 退出</li>
</ul>
<p>配合上述的@指令</p>
<p><code>@c</code> 就可以多次运行存放在c寄存器中的宏指令</p>
<h1 id="参考链接-Resource"><a href="#参考链接-Resource" class="headerlink" title="参考链接 Resource"></a>参考链接 Resource</h1><ul>
<li><a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim" target="_blank" rel="external">what is your most productive shortcut within vim</a></li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​    如果想要用好vim，理解作者的设计思路是很重要的。希望通过这篇文章，更深刻的理解作者的哲思。</p>
]]></content>
      
        <categories>
            
            <category> vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
            <tag> editor </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
